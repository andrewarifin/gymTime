/* tslint:disable:no-implicit-dependencies */
/**
 * BarcodePicker tests
 */

import { test } from "ava";
import {
  Barcode,
  BarcodePicker,
  BrowserHelper,
  Camera,
  CameraSettings,
  configure,
  CustomError,
  engineSDKWorkerFunction,
  ImageSettings,
  Parser,
  Scanner,
  ScanSettings
} from "scandit-sdk";
import * as sinon from "sinon";
import { Worker } from "webworker-threads";
import { ScanResult } from "./scanResult";

declare const global: any;

HTMLVideoElement.prototype.load = () => {
  return;
};
HTMLVideoElement.prototype.play = function(): Promise<void> {
  Object.defineProperty(this, "videoWidth", {
    writable: true,
    value: 4
  });
  Object.defineProperty(this, "videoHeight", {
    writable: true,
    value: 4
  });
  this.currentTime = 1;
  this.dispatchEvent(new Event("loadstart"));
  this.dispatchEvent(new Event("loadeddata"));

  return Promise.resolve();
};

const fakeCamera1: MediaDeviceInfo = {
  deviceId: "1",
  groupId: "1",
  kind: "videoinput",
  label: "Fake Camera Device (back)"
};
const fakeCamera2: MediaDeviceInfo = {
  deviceId: "2",
  groupId: "1",
  kind: "videoinput",
  label: "Fake Camera Device (front)"
};

const fakeCamera1Object: Camera = {
  deviceId: fakeCamera1.deviceId,
  label: fakeCamera1.label,
  cameraType: Camera.Type.BACK,
  currentResolution: {
    width: 4,
    height: 4
  }
};
const fakeCamera2Object: Camera = {
  deviceId: fakeCamera2.deviceId,
  label: fakeCamera2.label,
  cameraType: Camera.Type.FRONT,
  currentResolution: {
    width: 4,
    height: 4
  }
};

function fakePartialCompatibleBrowser(): void {
  (<any>navigator).mediaDevices = undefined;
  (<any>window).Worker = () => {
    return;
  };
  (<any>window).WebAssembly = {};
  (<any>window).Blob = () => {
    return;
  };
  (<any>window).URL = {
    createObjectURL: () => {
      return;
    }
  };
}

function fakeFullCompatibleBrowser(): void {
  (<any>navigator).mediaDevices = {
    getUserMedia: () => {
      return Promise.resolve({
        getTracks: () => {
          return [{}];
        },
        getVideoTracks: () => {
          return [
            {
              addEventListener: () => {
                return;
              },
              stop: () => {
                return;
              }
            }
          ];
        }
      });
    }
  };
  (<any>navigator).enumerateDevices = () => {
    return Promise.resolve([fakeCamera1, fakeCamera2]);
  };
  (<any>window).Worker = () => {
    return;
  };
  (<any>window).WebAssembly = {};
  (<any>window).Blob = () => {
    return;
  };
  (<any>window).URL = {
    createObjectURL: () => {
      return;
    }
  };
}

global.Worker = Worker;
global.URL = {
  createObjectURL: () => {
    return engineSDKWorkerFunction;
  }
};

test.serial("constructor & destroy", async t => {
  let error: Error = await t.throws(BarcodePicker.create(document.createElement("div")));
  t.is(error.name, "UnsupportedBrowserError");

  fakeFullCompatibleBrowser();
  error = await t.throws(BarcodePicker.create(document.createElement("div")));
  t.is(error.name, "LibraryNotConfiguredError");

  await configure("license_key");
  error = await t.throws(BarcodePicker.create(<any>0));
  t.is(error.name, "NoOriginElementError");

  let barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    singleImageMode: {
      desktop: { always: true, allowFallback: true },
      mobile: { always: true, allowFallback: true }
    }
  });
  barcodePicker.destroy();

  fakePartialCompatibleBrowser();
  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    singleImageMode: {
      desktop: { always: false, allowFallback: true },
      mobile: { always: false, allowFallback: true }
    }
  });
  barcodePicker.destroy();

  barcodePicker = await BarcodePicker.create(document.createElement("div"));
  barcodePicker.destroy(false);
  barcodePicker.getScanner().destroy();

  error = await t.throws(
    BarcodePicker.create(document.createElement("div"), {
      singleImageMode: {
        desktop: { always: false, allowFallback: false },
        mobile: { always: false, allowFallback: false }
      }
    })
  );
  t.is(error.name, "UnsupportedBrowserError");

  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    targetScanningFPS: -1
  });
  t.pass();
  barcodePicker.destroy();

  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    scanner: new Scanner()
  });
  t.pass();
  barcodePicker.destroy();

  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.pass();
  barcodePicker.destroy();

  BrowserHelper.userAgentInfo.setUA(
    "Mozilla/5.0 (iPhone; CPU iPhone OS 11_3 like Mac OS X) " +
      "AppleWebKit/605.1.15 (KHTML, like Gecko) Version / 11.0 Mobile / 15E148 Safari / 604.1"
  );
  barcodePicker = await BarcodePicker.create(document.createElement("div"));
  t.pass();
  barcodePicker.destroy();
});

test.serial("constructor & destroy (with fake camera)", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    scanner: s
  });
  (<any>s).engineWorkerOnMessage({
    data: ["status", "ready"]
  });
  barcodePicker.destroy();
  t.pass();
});

test.serial("isScanningPaused & pauseScanning & resumeScanning (with fake camera)", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    scanner: s
  });
  t.is(barcodePicker.isScanningPaused(), false);
  await barcodePicker.resumeScanning();
  t.is(barcodePicker.isScanningPaused(), false);
  (<any>s).engineWorkerOnMessage({
    data: ["status", "ready"]
  });
  barcodePicker.pauseScanning();
  t.is(barcodePicker.isScanningPaused(), true);
  await barcodePicker.resumeScanning();
  t.is(barcodePicker.isScanningPaused(), false);
  barcodePicker.destroy();
});

test.serial("accessCamera & getActiveCamera & setActiveCamera (with fake camera)", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  let barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.getActiveCamera(), undefined);
  await barcodePicker.accessCamera();
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);
  barcodePicker.pauseScanning();
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);
  barcodePicker.pauseScanning(true);
  t.is(barcodePicker.getActiveCamera(), undefined);
  await barcodePicker.resumeScanning();
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);
  await barcodePicker.setActiveCamera(fakeCamera2Object);
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera2Object);
  await barcodePicker.setActiveCamera();
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);
  barcodePicker.destroy();

  barcodePicker = await BarcodePicker.create(document.createElement("div"));
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);
  await barcodePicker.accessCamera();
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);

  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  await barcodePicker.setActiveCamera(fakeCamera2Object);
  t.deepEqual(barcodePicker.getActiveCamera(), undefined);
  await barcodePicker.accessCamera();
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera2Object);

  BrowserHelper.userAgentInfo.setUA(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) " +
      "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36"
  );
  barcodePicker = await BarcodePicker.create(document.createElement("div"));
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);
  await barcodePicker.accessCamera();
  t.deepEqual(barcodePicker.getActiveCamera(), fakeCamera1Object);
});

test.serial("applyCameraSettings (with fake camera)", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  const cs: CameraSettings = {
    resolutionPreference: CameraSettings.ResolutionPreference.FULL_HD
  };
  const setSelectedCameraSettingsSpy: sinon.SinonSpy = sinon.spy(
    (<any>barcodePicker).cameraManager,
    "setSelectedCameraSettings"
  );
  const applyCameraSettingsSpy: sinon.SinonSpy = sinon.spy((<any>barcodePicker).cameraManager, "applyCameraSettings");
  t.is(setSelectedCameraSettingsSpy.callCount, 0);
  t.is(applyCameraSettingsSpy.callCount, 0);
  barcodePicker.applyCameraSettings(cs);
  t.is(barcodePicker.getActiveCamera(), undefined);
  t.is(setSelectedCameraSettingsSpy.callCount, 1);
  t.is(applyCameraSettingsSpy.callCount, 0);
  t.deepEqual(setSelectedCameraSettingsSpy.getCall(0).args, [cs]);
  barcodePicker.applyCameraSettings();
  t.is(barcodePicker.getActiveCamera(), undefined);
  t.is(setSelectedCameraSettingsSpy.callCount, 2);
  t.deepEqual(setSelectedCameraSettingsSpy.getCall(1).args, [undefined]);
  await barcodePicker.accessCamera();
  barcodePicker.applyCameraSettings(cs);
  t.is(applyCameraSettingsSpy.callCount, 1);
  t.deepEqual(applyCameraSettingsSpy.getCall(0).args, [cs]);
  barcodePicker.destroy();
});

test.serial("applyScanSettings", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    scanner: s
  });
  const ss: ScanSettings = new ScanSettings({
    enabledSymbologies: Barcode.Symbology.QR,
    codeDuplicateFilter: 10,
    maxNumberOfCodesPerFrame: 10,
    searchArea: { x: 0.5, y: 0.5, width: 0.5, height: 0.1 }
  });
  const applyScanSettingsSpy: sinon.SinonSpy = sinon.spy(s, "applyScanSettings");
  t.is(applyScanSettingsSpy.callCount, 0);
  barcodePicker.applyScanSettings(ss);
  t.is(applyScanSettingsSpy.callCount, 1);
  t.deepEqual(applyScanSettingsSpy.getCall(0).args, [ss]);
  barcodePicker.destroy();
});

test.serial("isVisible & setVisible", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  let barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isVisible(), true);
  barcodePicker.setVisible(false);
  t.is(barcodePicker.isVisible(), false);
  barcodePicker.setVisible(true);
  t.is(barcodePicker.isVisible(), true);
  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    visible: false
  });
  t.is(barcodePicker.isVisible(), false);
  barcodePicker.setVisible(true);
  t.is(barcodePicker.isVisible(), true);
  barcodePicker.destroy();
});

test.serial("isMirrorImageEnabled & setMirrorImageEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  let barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isMirrorImageEnabled(), false);
  barcodePicker.setMirrorImageEnabled(true);
  t.is(barcodePicker.isMirrorImageEnabled(), true);
  barcodePicker.setMirrorImageEnabled(false);
  t.is(barcodePicker.isMirrorImageEnabled(), false);
  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    camera: fakeCamera2Object
  });
  t.is(barcodePicker.isMirrorImageEnabled(), true);
  barcodePicker.setMirrorImageEnabled(false);
  t.is(barcodePicker.isMirrorImageEnabled(), false);
  barcodePicker.destroy();
});

test.serial("isPlaySoundOnScanEnabled & setPlaySoundOnScanEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  let barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isPlaySoundOnScanEnabled(), false);
  barcodePicker.setPlaySoundOnScanEnabled(true);
  t.is(barcodePicker.isPlaySoundOnScanEnabled(), true);
  barcodePicker.setPlaySoundOnScanEnabled(false);
  t.is(barcodePicker.isPlaySoundOnScanEnabled(), false);
  barcodePicker.destroy();
  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    playSoundOnScan: true
  });
  t.is(barcodePicker.isPlaySoundOnScanEnabled(), true);
  barcodePicker.setPlaySoundOnScanEnabled(false);
  t.is(barcodePicker.isPlaySoundOnScanEnabled(), false);
  barcodePicker.destroy();
});

test.serial("isVibrateOnScanEnabled & setVibrateOnScanEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  let barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isVibrateOnScanEnabled(), false);
  barcodePicker.setVibrateOnScanEnabled(true);
  t.is(barcodePicker.isVibrateOnScanEnabled(), true);
  barcodePicker.setVibrateOnScanEnabled(false);
  t.is(barcodePicker.isVibrateOnScanEnabled(), false);
  barcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    vibrateOnScan: true
  });
  t.is(barcodePicker.isVibrateOnScanEnabled(), true);
  barcodePicker.setVibrateOnScanEnabled(false);
  t.is(barcodePicker.isVibrateOnScanEnabled(), false);
  barcodePicker.destroy();
});

test.serial("isCameraSwitcherEnabled & setCameraSwitcherEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isCameraSwitcherEnabled(), true);
  barcodePicker.setCameraSwitcherEnabled(false);
  t.is(barcodePicker.isCameraSwitcherEnabled(), false);
  barcodePicker.setCameraSwitcherEnabled(true);
  t.is(barcodePicker.isCameraSwitcherEnabled(), true);
  barcodePicker.destroy();
});

test.serial("isTorchToggleEnabled & setTorchToggleEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isTorchToggleEnabled(), true);
  barcodePicker.setTorchToggleEnabled(false);
  t.is(barcodePicker.isTorchToggleEnabled(), false);
  barcodePicker.setTorchToggleEnabled(true);
  t.is(barcodePicker.isTorchToggleEnabled(), true);
  barcodePicker.destroy();
});

test.serial("isTapToFocusEnabled & setTapToFocusEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isTapToFocusEnabled(), true);
  barcodePicker.setTapToFocusEnabled(false);
  t.is(barcodePicker.isTapToFocusEnabled(), false);
  barcodePicker.setTapToFocusEnabled(true);
  t.is(barcodePicker.isTapToFocusEnabled(), true);
  barcodePicker.destroy();
});

test.serial("isPinchToZoomEnabled & setPinchToZoomEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is(barcodePicker.isPinchToZoomEnabled(), true);
  barcodePicker.setPinchToZoomEnabled(false);
  t.is(barcodePicker.isPinchToZoomEnabled(), false);
  barcodePicker.setPinchToZoomEnabled(true);
  t.is(barcodePicker.isPinchToZoomEnabled(), true);
  barcodePicker.destroy();
});

test.serial("setTorchEnabled", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  barcodePicker.setTorchEnabled(true);
  barcodePicker.setTorchEnabled(false);
  t.pass();
  barcodePicker.destroy();
});

test.serial("setZoom", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  barcodePicker.setZoom(0.1);
  barcodePicker.setZoom(1);
  t.pass();
  barcodePicker.destroy();
});

test.serial("setGuiStyle", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  barcodePicker.setGuiStyle(BarcodePicker.GuiStyle.NONE);
  barcodePicker.setGuiStyle(BarcodePicker.GuiStyle.LASER);
  barcodePicker.setGuiStyle(BarcodePicker.GuiStyle.VIEWFINDER);
  barcodePicker.setGuiStyle(BarcodePicker.GuiStyle.NONE);
  t.pass();
  barcodePicker.destroy();
});

test.serial("setVideoFit", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  barcodePicker.setVideoFit(BarcodePicker.ObjectFit.COVER);
  barcodePicker.setVideoFit(BarcodePicker.ObjectFit.CONTAIN);
  t.pass();
  barcodePicker.destroy();
});

test.serial("createParserForFormat", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  let parser: Parser = barcodePicker.createParserForFormat(Parser.DataFormat.DLID);
  t.truthy(parser);
  parser = barcodePicker.createParserForFormat(Parser.DataFormat.GS1_AI);
  t.truthy(parser);
  parser = barcodePicker.createParserForFormat(Parser.DataFormat.HIBC);
  t.truthy(parser);
  parser = barcodePicker.createParserForFormat(Parser.DataFormat.MRTD);
  t.truthy(parser);
  parser = barcodePicker.createParserForFormat(Parser.DataFormat.SWISSQR);
  t.truthy(parser);
  barcodePicker.destroy();
});

test.serial("reassignOriginElement", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const element1: HTMLDivElement = document.createElement("div");
  const element2: HTMLDivElement = document.createElement("div");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(element1, {
    accessCamera: false
  });
  t.deepEqual((<any>barcodePicker).barcodePickerGui.originElement, element1);
  t.notDeepEqual((<any>barcodePicker).barcodePickerGui.originElement, element2);
  barcodePicker.reassignOriginElement(document.createElement("div"));
  t.deepEqual((<any>barcodePicker).barcodePickerGui.originElement, element2);
  t.notDeepEqual((<any>barcodePicker).barcodePickerGui.originElement, element1);
});

test.serial("setTargetScanningFPS", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false
  });
  t.is((<any>barcodePicker).targetScanningFPS, 30);
  barcodePicker.setTargetScanningFPS(10);
  t.is((<any>barcodePicker).targetScanningFPS, 10);
  barcodePicker.setTargetScanningFPS(0);
  t.is((<any>barcodePicker).targetScanningFPS, 10);
  barcodePicker.destroy();
});

test.serial("isReady & onReady", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    scanner: s
  });
  const callbackSpy1: sinon.SinonSpy = sinon.spy();
  const callbackSpy2: sinon.SinonSpy = sinon.spy();
  const callbackSpy3: sinon.SinonSpy = sinon.spy();
  const callbackSpy4: sinon.SinonSpy = sinon.spy();
  t.false(s.isReady());
  t.false(barcodePicker.isReady());
  s.onReady(callbackSpy1);
  barcodePicker.onReady(callbackSpy2);
  barcodePicker.onReady(callbackSpy3);
  t.false(callbackSpy1.called);
  t.false(callbackSpy2.called);
  t.false(callbackSpy3.called);
  (<any>s).engineWorkerOnMessage({
    data: ["status", "ready"]
  });
  t.true(s.isReady());
  t.true(barcodePicker.isReady());
  t.true(callbackSpy1.called);
  t.true(callbackSpy2.called);
  t.true(callbackSpy3.called);
  t.true(callbackSpy3.calledAfter(callbackSpy2));
  t.true(callbackSpy1.calledAfter(callbackSpy3));
  barcodePicker.onReady(callbackSpy4);
  t.true(callbackSpy4.called);
  barcodePicker.destroy();
});

test.serial("onScan & removeScanListener & removeScanListeners", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const imageSettings: ImageSettings = {
    width: 2,
    height: 2,
    format: ImageSettings.Format.GRAY_8U
  };
  s.applyImageSettings(imageSettings);
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    scanner: s
  });
  const callbackSpy1: sinon.SinonSpy = sinon.spy();
  const callbackSpy2: sinon.SinonSpy = sinon.spy();
  const callbackSpy3: sinon.SinonSpy = sinon.spy();
  barcodePicker.onScan(callbackSpy1);
  barcodePicker.onScan(callbackSpy2);
  barcodePicker.onScan(callbackSpy3, true);
  t.false(callbackSpy1.called);
  t.false(callbackSpy2.called);
  t.false(callbackSpy3.called);
  (<any>s).engineWorkerOnMessage({
    data: ["status", "ready"]
  });
  sinon.stub((<any>barcodePicker).barcodePickerGui, "getVideoImageData").callsFake(() => {
    return new Uint8ClampedArray(4);
  });
  sinon.stub(s, "processImage").callsFake(() => {
    return Promise.resolve({
      barcodes: [],
      imageData: new Uint8ClampedArray(4),
      imageSettings
    });
  });
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 0);
  t.is(callbackSpy2.callCount, 0);
  t.is(callbackSpy3.callCount, 0);
  const scanResult: ScanResult = {
    barcodes: [
      {
        symbology: Barcode.Symbology.QR,
        compositeFlag: Barcode.CompositeFlag.NONE,
        isGs1DataCarrier: false,
        encodingArray: [],
        location: {
          topLeft: { x: 0, y: 0 },
          topRight: { x: 1, y: 0 },
          bottomRight: { x: 1, y: 1 },
          bottomLeft: { x: 0, y: 1 }
        },
        data: "",
        rawData: new Uint8Array()
      }
    ],
    imageData: new Uint8ClampedArray(4),
    imageSettings: {
      width: 2,
      height: 2,
      format: ImageSettings.Format.GRAY_8U
    }
  };
  (<any>s.processImage).restore();
  sinon.stub(s, "processImage").callsFake(() => {
    return Promise.resolve(scanResult);
  });
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 1);
  t.is(callbackSpy2.callCount, 1);
  t.is(callbackSpy3.callCount, 1);
  t.deepEqual(callbackSpy1.getCall(0).args, [scanResult]);
  t.deepEqual(callbackSpy2.getCall(0).args, [scanResult]);
  t.deepEqual(callbackSpy3.getCall(0).args, [scanResult]);
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 2);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeScanListener(callbackSpy1);
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeScanListeners();
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.destroy();
});

test.serial("onSubmitFrame & removeSubmitFrameListener & removeSubmitFrameListeners", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const imageSettings: ImageSettings = {
    width: 2,
    height: 2,
    format: ImageSettings.Format.GRAY_8U
  };
  s.applyImageSettings(imageSettings);
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    scanner: s
  });
  const callbackSpy1: sinon.SinonSpy = sinon.spy();
  const callbackSpy2: sinon.SinonSpy = sinon.spy();
  const callbackSpy3: sinon.SinonSpy = sinon.spy();
  barcodePicker.onSubmitFrame(callbackSpy1);
  barcodePicker.onSubmitFrame(callbackSpy2);
  barcodePicker.onSubmitFrame(callbackSpy3, true);
  t.false(callbackSpy1.called);
  t.false(callbackSpy2.called);
  t.false(callbackSpy3.called);
  (<any>s).engineWorkerOnMessage({
    data: ["status", "ready"]
  });
  sinon.stub((<any>barcodePicker).barcodePickerGui, "getVideoImageData").callsFake(() => {
    return new Uint8ClampedArray(4);
  });
  const scanResult: ScanResult = {
    barcodes: [],
    imageData: new Uint8ClampedArray(4),
    imageSettings
  };
  sinon.stub(s, "processImage").callsFake(() => {
    return Promise.resolve({
      ...scanResult,
      barcodes: [
        {
          symbology: Barcode.Symbology.QR,
          compositeFlag: Barcode.CompositeFlag.NONE,
          isGs1DataCarrier: false,
          encodingArray: [],
          location: {
            topLeft: { x: 0, y: 0 },
            topRight: { x: 1, y: 0 },
            bottomRight: { x: 1, y: 1 },
            bottomLeft: { x: 0, y: 1 }
          },
          data: "",
          rawData: new Uint8Array()
        }
      ]
    });
  });
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 1);
  t.is(callbackSpy2.callCount, 1);
  t.is(callbackSpy3.callCount, 1);
  t.deepEqual(callbackSpy1.getCall(0).args, [scanResult]);
  t.deepEqual(callbackSpy2.getCall(0).args, [scanResult]);
  t.deepEqual(callbackSpy3.getCall(0).args, [scanResult]);
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 2);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeSubmitFrameListener(callbackSpy1);
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeSubmitFrameListeners();
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.destroy();
});

test.serial("onScanError & removeScanErrorListener & removeScanErrorListeners", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const imageSettings: ImageSettings = {
    width: 2,
    height: 2,
    format: ImageSettings.Format.GRAY_8U
  };
  s.applyImageSettings(imageSettings);
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    scanner: s
  });
  const callbackSpy1: sinon.SinonSpy = sinon.spy();
  const callbackSpy2: sinon.SinonSpy = sinon.spy();
  const callbackSpy3: sinon.SinonSpy = sinon.spy();
  barcodePicker.onScanError(callbackSpy1);
  barcodePicker.onScanError(callbackSpy2);
  barcodePicker.onScanError(callbackSpy3, true);
  t.false(callbackSpy1.called);
  t.false(callbackSpy2.called);
  t.false(callbackSpy3.called);
  (<any>s).engineWorkerOnMessage({
    data: ["status", "ready"]
  });
  sinon.stub((<any>barcodePicker).barcodePickerGui, "getVideoImageData").callsFake(() => {
    return new Uint8ClampedArray(4);
  });
  sinon.stub(s, "processImage").callsFake(() => {
    return Promise.resolve({
      barcodes: [],
      imageData: new Uint8ClampedArray(4),
      imageSettings
    });
  });
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 0);
  t.is(callbackSpy2.callCount, 0);
  t.is(callbackSpy3.callCount, 0);
  const scanError: Error = new CustomError({
    name: "ScanditEngineError",
    message: `Test error`
  });
  (<any>s.processImage).restore();
  sinon.stub(s, "processImage").callsFake(() => {
    return Promise.reject(scanError);
  });
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 1);
  t.is(callbackSpy2.callCount, 1);
  t.is(callbackSpy3.callCount, 1);
  t.deepEqual(callbackSpy1.getCall(0).args, [scanError]);
  t.deepEqual(callbackSpy2.getCall(0).args, [scanError]);
  t.deepEqual(callbackSpy3.getCall(0).args, [scanError]);
  barcodePicker.resumeScanning();
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 2);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeScanErrorListener(callbackSpy1);
  barcodePicker.resumeScanning();
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeScanErrorListeners();
  barcodePicker.resumeScanning();
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.destroy();
});

test.serial("onProcessFrame & removeProcessFrameListener & removeProcessFrameListeners", async t => {
  fakeFullCompatibleBrowser();
  await configure("license_key");
  const s: Scanner = new Scanner();
  const imageSettings: ImageSettings = {
    width: 2,
    height: 2,
    format: ImageSettings.Format.GRAY_8U
  };
  s.applyImageSettings(imageSettings);
  const barcodePicker: BarcodePicker = await BarcodePicker.create(document.createElement("div"), {
    accessCamera: false,
    scanner: s
  });
  const callbackSpy1: sinon.SinonSpy = sinon.spy();
  const callbackSpy2: sinon.SinonSpy = sinon.spy();
  const callbackSpy3: sinon.SinonSpy = sinon.spy();
  barcodePicker.onProcessFrame(callbackSpy1);
  barcodePicker.onProcessFrame(callbackSpy2);
  barcodePicker.onProcessFrame(callbackSpy3, true);
  t.false(callbackSpy1.called);
  t.false(callbackSpy2.called);
  t.false(callbackSpy3.called);
  (<any>s).engineWorkerOnMessage({
    data: ["status", "ready"]
  });
  sinon.stub((<any>barcodePicker).barcodePickerGui, "getVideoImageData").callsFake(() => {
    return new Uint8ClampedArray(4);
  });
  const scanResult: ScanResult = {
    barcodes: [],
    imageData: new Uint8ClampedArray(4),
    imageSettings
  };
  sinon.stub(s, "processImage").callsFake(() => {
    return Promise.resolve(scanResult);
  });
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 1);
  t.is(callbackSpy2.callCount, 1);
  t.is(callbackSpy3.callCount, 1);
  t.deepEqual(callbackSpy1.getCall(0).args, [scanResult]);
  t.deepEqual(callbackSpy2.getCall(0).args, [scanResult]);
  t.deepEqual(callbackSpy3.getCall(0).args, [scanResult]);
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 2);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeProcessFrameListener(callbackSpy1);
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.removeProcessFrameListeners();
  await (<any>barcodePicker).processVideoFrame(true);
  t.is(callbackSpy1.callCount, 2);
  t.is(callbackSpy2.callCount, 3);
  t.is(callbackSpy3.callCount, 1);
  barcodePicker.destroy();
});
