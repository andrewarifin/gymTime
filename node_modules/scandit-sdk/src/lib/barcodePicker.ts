import { EventEmitter } from "eventemitter3";
import { Howl, Howler } from "howler/dist/howler.core.min.js";

import { beepSound } from "./assets/base64assets";

import { userLicenseKey } from "../index";
import { BarcodePickerCameraManager } from "./barcodePickerCameraManager";
import { BarcodePickerGui } from "./barcodePickerGui";
import { BrowserCompatibility } from "./browserCompatibility";
import { BrowserHelper } from "./browserHelper";
import { Camera } from "./camera";
import { CameraManager } from "./cameraManager";
import { CameraSettings } from "./cameraSettings";
import { CustomError } from "./customError";
import { DummyCameraManager } from "./dummyCameraManager";
import { Parser } from "./parser";
import { Scanner } from "./scanner";
import { ScanResult } from "./scanResult";
import { ScanSettings } from "./scanSettings";

/**
 * @hidden
 */
class BarcodePickerEventEmitter extends EventEmitter<"ready" | "submitFrame" | "processFrame" | "scan" | "scanError"> {}

/**
 * A barcode picker element used to get and show camera input and perform scanning operations.
 *
 * The barcode picker will automatically fit and scale inside the given *originElement*.
 *
 * Each barcode picker internally contains a [[Scanner]] object with its own WebWorker thread running a
 * separate copy of the external Scandit Engine library. To optimize loading times and performance it's
 * recommended to reuse the same picker and to already create the picker in advance (hidden) and just
 * display it when needed whenever possible.
 *
 * As the loading of the external Scandit Engine library can take some time the picker always starts inactive
 * (but showing GUI and video) and then activates, if not paused, as soon as the library is ready to scan.
 * The [[onReady]] method can be used to set up a listener function to be called when the library is loaded.
 *
 * The picker can also operate in "single image mode", letting the user click/tap to take a single image to be scanned
 * via the camera (mobile/tablet) or a file select dialog (desktop). This is provided automatically as fallback by
 * default when the OS/browser only supports part of the needed features and cannot provide direct access to the camera
 * for video streaming and continuous scanning, or can also be forced. This behaviour can be set up on creation. Note
 * that in this mode some of the functions provided by the picker will have no effect.
 *
 * By default an alert is shown if an internal error during scanning is encountered which prevents the scanning
 * procedure from continuing when running on a local IP address. As this uses the built-in [[onScanError]] event
 * functionality, if unwanted it can be disabled by calling [[removeScanErrorListeners]] on the BarcodePicker
 * instance (right after creation).
 *
 * You are not allowed to hide the Scandit logo present in the corner of the GUI.
 */
export class BarcodePicker {
  private cameraManager: CameraManager;
  private barcodePickerGui: BarcodePickerGui;
  private playSoundOnScan: boolean;
  private vibrateOnScan: boolean;
  private scanningPaused: boolean;
  private eventEmitter: BarcodePickerEventEmitter;
  private scanner: Scanner;
  private fatalError: Error;
  private beepSound: Howl;
  private vibrateFunction: (pattern: number | number[]) => boolean;
  private latestVideoTimeProcessed: number;
  private destroyed: boolean;
  private isReadyToWork: boolean;
  private cameraAccess: boolean;
  private targetScanningFPS: number;
  private averageProcessingTime: number;

  private constructor(
    originElement: HTMLElement,
    {
      visible,
      singleImageMode,
      playSoundOnScan,
      vibrateOnScan,
      scanningPaused,
      guiStyle,
      videoFit,
      scanner,
      scanSettings,
      targetScanningFPS
    }: {
      visible: boolean;
      singleImageMode: boolean;
      playSoundOnScan: boolean;
      vibrateOnScan: boolean;
      scanningPaused: boolean;
      guiStyle: BarcodePicker.GuiStyle;
      videoFit: BarcodePicker.ObjectFit;
      scanner?: Scanner;
      scanSettings: ScanSettings;
      targetScanningFPS: number;
    }
  ) {
    this.isReadyToWork = false;
    this.destroyed = false;
    this.scanningPaused = scanningPaused;

    Howler.autoSuspend = false;
    this.beepSound = new Howl({
      src: beepSound
    });

    this.vibrateFunction =
      <any>navigator.vibrate ||
      (<any>navigator).webkitVibrate ||
      (<any>navigator).mozVibrate ||
      (<any>navigator).msVibrate;

    this.eventEmitter = new EventEmitter();

    this.setPlaySoundOnScanEnabled(playSoundOnScan);
    this.setVibrateOnScanEnabled(vibrateOnScan);
    this.setTargetScanningFPS(targetScanningFPS);

    if (scanner == null) {
      this.scanner = new Scanner({ scanSettings: scanSettings });
    } else {
      this.scanner = scanner;
      this.scanner.applyScanSettings(scanSettings);
    }
    this.scanner.onReady(() => {
      this.isReadyToWork = true;
      this.eventEmitter.emit("ready");
    });

    this.barcodePickerGui = new BarcodePickerGui(
      this.scanner,
      originElement,
      singleImageMode,
      scanningPaused,
      visible,
      guiStyle,
      videoFit,
      this.processVideoFrame.bind(this, true)
    );

    if (singleImageMode) {
      this.cameraManager = new DummyCameraManager();
    } else {
      this.scheduleVideoProcessing();

      this.cameraManager = new BarcodePickerCameraManager(this.triggerFatalError.bind(this), this.barcodePickerGui);
    }

    this.barcodePickerGui.setCameraManager(this.cameraManager);
  }

  /**
   * Creates a [[BarcodePicker]] instance, creating the needed HTML in the given origin element.
   * If the *accessCamera* option is enabled (active by default) and the picker is not in "single image mode",
   * the available cameras are accessed and camera access permission is requested to the user if needed.
   * This object expects that at least a camera is available. The active camera is accessed and kept active during the
   * lifetime of the picker (also when hidden or scanning is paused), and is only released when [[destroy]] is called.
   *
   * It is required to having configured the library via [[configure]] before this object can be created.
   *
   * The "single image mode" behaviour of the picker can be set up via the
   * *singleImageMode* option, which accepts a configuration object of the form:
   * ```
   * {
   *   desktop: {
   *     always: false, allowFallback: true
   *   },
   *   mobile: {
   *     always: false, allowFallback: true
   *   }
   * }
   * ```
   *
   * Depending on parameters, device features and user permissions for camera access, any of the following errors
   * could be the rejected result of the returned promise:
   * - `LibraryNotConfiguredError`
   * - `NoOriginElementError`
   * - `UnsupportedBrowserError`
   * - `PermissionDeniedError`
   * - `NotAllowedError`
   * - `NotFoundError`
   * - `AbortError`
   * - `NotReadableError`
   * - `InternalError`
   * - `NoCameraAvailableError`
   *
   * @param originElement The HTMLElement inside which all the necessary elements for the picker will be added.
   * @param visible <div class="tsd-signature-symbol">Default =&nbsp;true</div>
   * Whether the picker starts in a visible state.
   * @param singleImageMode <div class="tsd-signature-symbol">Default =&nbsp;
   * { desktop: { always: false, allowFallback: true }, mobile: { always: false, allowFallback: true } }</div>
   * Whether to provide a UI to pick/snap a single image from the camera instead of accessing and using the persistent
   * video stream from a camera ("force"), or to allow to provide this as a fallback ("allowFallback") in case the
   * necessary features for direct camera access are not provided by the OS/browser.
   * @param playSoundOnScan <div class="tsd-signature-symbol">Default =&nbsp;false</div>
   * Whether a sound is played on barcode scanned (iOS requires user input).
   * @param vibrateOnScan <div class="tsd-signature-symbol">Default =&nbsp;false</div>
   * Whether the device vibrates on barcode scanned (only Chrome & Firefox, requires user input).
   * @param scanningPaused <div class="tsd-signature-symbol">Default =&nbsp;false</div>
   * Whether the picker starts in a paused scanning state.
   * @param guiStyle <div class="tsd-signature-symbol">Default =&nbsp;GuiStyle.LASER</div>
   * The GUI style for the picker.
   * @param videoFit <div class="tsd-signature-symbol">Default =&nbsp;ObjectFit.CONTAIN</div>
   * The fit type for the video element of the picker.
   * @param enableCameraSwitcher <div class="tsd-signature-symbol">Default =&nbsp;true</div>
   * Whether to show a GUI button to switch between different cameras (when available).
   * @param enableTorchToggle <div class="tsd-signature-symbol">Default =&nbsp;true</div>
   * Whether to show a GUI button to toggle device torch on/off (when available, only Chrome).
   * @param enableTapToFocus <div class="tsd-signature-symbol">Default =&nbsp;true</div>
   * Whether to trigger a manual focus of the camera when clicking/tapping on the video (when available, only Chrome).
   * @param enablePinchToZoom <div class="tsd-signature-symbol">Default =&nbsp;true</div>
   * Whether to control the zoom of the camera when doing a pinching gesture on the video (when available, only Chrome).
   * @param accessCamera <div class="tsd-signature-symbol">Default =&nbsp;true</div>
   * Whether to immediately access the camera (and requesting user permissions if needed) on picker creation.
   * @param camera <div class="tsd-signature-symbol">Default =&nbsp;undefined</div>
   * The camera to be used for video input, if not specified the back or only camera will be used.
   * @param cameraSettings <div class="tsd-signature-symbol">Default =&nbsp;undefined</div>
   * The camera options used when accessing the camera, by default HD resolution is used.
   * @param scanner <div class="tsd-signature-symbol">Default =&nbsp;undefined</div>
   * The scanner object responsible for scanning via the external Scandit Engine library
   * (A new scanner will be created and initialized if not provided).
   * @param scanSettings <div class="tsd-signature-symbol">Default =&nbsp;new ScanSettings()</div>
   * The configuration object for scanning options to be applied to the scanner (All symbologies disabled by default).
   * @param targetScanningFPS <div class="tsd-signature-symbol">Default =&nbsp;30</div>
   * The target frames per second to be processed, the final speed is limited by the camera framerate (usually 30 FPS)
   * and the frame processing time of the device. By setting this to lower numbers devices can save power by performing
   * less work during scanning operations, depending on device speed (faster devices can "sleep" for longer periods).
   * Must be a number bigger than 0.
   * @returns A promise resolving to the created ready [[BarcodePicker]] object.
   */
  public static create(
    originElement: HTMLElement,
    {
      visible = true,
      singleImageMode = {
        desktop: { always: false, allowFallback: true },
        mobile: { always: false, allowFallback: true }
      },
      playSoundOnScan = false,
      vibrateOnScan = false,
      scanningPaused = false,
      guiStyle = BarcodePicker.GuiStyle.LASER,
      videoFit = BarcodePicker.ObjectFit.CONTAIN,
      scanner,
      scanSettings = new ScanSettings(),
      enableCameraSwitcher = true,
      enableTorchToggle = true,
      enableTapToFocus = true,
      enablePinchToZoom = true,
      accessCamera = true,
      camera,
      cameraSettings,
      targetScanningFPS = 30
    }: {
      visible?: boolean;
      singleImageMode?: {
        desktop: { always: boolean; allowFallback: boolean };
        mobile: { always: boolean; allowFallback: boolean };
      };
      playSoundOnScan?: boolean;
      vibrateOnScan?: boolean;
      scanningPaused?: boolean;
      guiStyle?: BarcodePicker.GuiStyle;
      videoFit?: BarcodePicker.ObjectFit;
      scanner?: Scanner;
      scanSettings?: ScanSettings;
      enableCameraSwitcher?: boolean;
      enableTorchToggle?: boolean;
      enableTapToFocus?: boolean;
      enablePinchToZoom?: boolean;
      accessCamera?: boolean;
      camera?: Camera;
      cameraSettings?: CameraSettings;
      targetScanningFPS?: number;
    } = {}
  ): Promise<BarcodePicker> {
    let singleImageModeForced: boolean;
    let singleImageModeFallbackAllowed: boolean;
    const deviceType: string | undefined = BrowserHelper.userAgentInfo.getDevice().type;
    if (deviceType === "mobile" || deviceType === "tablet") {
      singleImageModeForced = singleImageMode.mobile.always;
      singleImageModeFallbackAllowed = singleImageMode.mobile.allowFallback;
    } else {
      singleImageModeForced = singleImageMode.desktop.always;
      singleImageModeFallbackAllowed = singleImageMode.desktop.allowFallback;
    }

    const browserCompatibility: BrowserCompatibility = BrowserHelper.checkBrowserCompatibility();
    if (
      !browserCompatibility.scannerSupport ||
      (!singleImageModeForced && !singleImageModeFallbackAllowed && !browserCompatibility.fullSupport)
    ) {
      return Promise.reject(
        new CustomError({
          name: "UnsupportedBrowserError",
          message: "This OS / Browser has one or more missing features preventing it from working correctly",
          data: browserCompatibility
        })
      );
    }

    if (userLicenseKey == null || userLicenseKey.trim() === "") {
      return Promise.reject(
        new CustomError({
          name: "LibraryNotConfiguredError",
          message: "The library has not correctly been configured yet, please call 'configure' with valid parameters"
        })
      );
    }
    if (!(originElement instanceof HTMLElement)) {
      return Promise.reject(
        new CustomError({
          name: "NoOriginElementError",
          message: "A valid origin HTML element must be given"
        })
      );
    }
    if (targetScanningFPS <= 0) {
      targetScanningFPS = 30;
    }

    const barcodePicker: BarcodePicker = new BarcodePicker(originElement, {
      visible,
      singleImageMode: browserCompatibility.fullSupport ? singleImageModeForced : true,
      playSoundOnScan,
      vibrateOnScan,
      scanningPaused,
      guiStyle,
      videoFit,
      scanner,
      scanSettings,
      targetScanningFPS
    });

    barcodePicker.cameraManager.setInteractionOptions(
      enableCameraSwitcher,
      enableTorchToggle,
      enableTapToFocus,
      enablePinchToZoom
    );
    barcodePicker.cameraManager.setSelectedCamera(camera);
    barcodePicker.cameraManager.setSelectedCameraSettings(cameraSettings);

    barcodePicker.cameraAccess = accessCamera;

    // Show error in alert on ScanError by default when running on local IP address for easier customer debugging
    barcodePicker.onScanError(error => {
      if (["localhost", "127.0.0.1", ""].indexOf(window.location.hostname) !== -1) {
        alert(error);
      }
    });

    if (accessCamera) {
      return barcodePicker.cameraManager.setupCameras().then(() => {
        return barcodePicker;
      });
    }

    return Promise.resolve(barcodePicker);
  }

  /**
   * Stop scanning and displaying video output, remove HTML elements added to the page,
   * destroy the internal [[Scanner]] (by default) and destroy the barcode picker itself; ensuring complete cleanup.
   *
   * This method should be called after you don't plan to use the picker anymore,
   * before the object is automatically cleaned up by JavaScript.
   * The barcode picker must not be used in any way after this call.
   *
   * If the [[Scanner]] is or will be in use for other purposes, the relative option can be passed to prevent
   * its destruction.
   *
   * @param destroyScanner Whether to destroy the internally used [[Scanner]] or not.
   */
  public destroy(destroyScanner: boolean = true): void {
    this.pauseScanning(true);
    this.destroyed = true;
    if (destroyScanner) {
      this.scanner.destroy();
    }
    this.barcodePickerGui.destroy();
    this.eventEmitter.removeAllListeners();
  }

  /**
   * Applies a new set of scan settings to the internal scanner (replacing old settings).
   *
   * @param scanSettings The scan configuration object to be applied to the scanner.
   * @returns The updated [[BarcodePicker]] object.
   */
  public applyScanSettings(scanSettings: ScanSettings): BarcodePicker {
    this.scanner.applyScanSettings(scanSettings);

    return this;
  }

  /**
   * @returns Whether the scanning is currently paused.
   */
  public isScanningPaused(): boolean {
    return this.scanningPaused;
  }

  /**
   * Pause the recognition of codes in the input image.
   *
   * By default video from the camera is still shown, if the *pauseCamera* option is enabled the camera stream
   * is paused (camera access is fully interrupted) and will be resumed when calling [[resumeScanning]] or
   * [[accessCamera]], possibly requesting user permissions if needed.
   *
   * In "single image mode" the input for submitting a picture is disabled.
   *
   * @param pauseCamera Whether to also pause the camera stream.
   * @returns The updated [[BarcodePicker]] object.
   */
  public pauseScanning(pauseCamera: boolean = false): BarcodePicker {
    this.scanningPaused = true;

    if (pauseCamera) {
      this.cameraManager.stopStream();
    }

    if (this.scanner.isReady()) {
      this.barcodePickerGui.pauseScanning();
    }

    return this;
  }

  /**
   * Resume the recognition of codes in the input image.
   *
   * If the camera stream was stopped when calling [[pauseScanning]], the camera stream is also resumed and
   * user permissions are requested if needed to resume video input.
   *
   * In "single image mode" the input for submitting a picture is enabled.
   *
   * @returns The updated [[BarcodePicker]] object.
   */
  public resumeScanning(): Promise<BarcodePicker> {
    this.scanningPaused = false;

    if (this.scanner.isReady()) {
      this.barcodePickerGui.resumeScanning();
    }

    if (this.cameraManager.activeCamera == null && this.cameraAccess) {
      return this.cameraManager.setupCameras().then(() => {
        return this;
      });
    }

    return Promise.resolve(this);
  }

  /**
   * @returns The currently active camera.
   */
  public getActiveCamera(): Camera | undefined {
    return this.cameraManager.activeCamera;
  }

  /**
   * Select a camera to be used for video input, if no camera is passed, the default one is selected.
   *
   * If camera access is enabled, the camera is enabled and accessed.
   *
   * Depending on device features and user permissions for camera access, any of the following errors
   * could be the rejected result of the returned promise:
   * - `PermissionDeniedError`
   * - `NotAllowedError`
   * - `NotFoundError`
   * - `AbortError`
   * - `NotReadableError`
   * - `InternalError`
   * - `NoCameraAvailableError`
   *
   * In "single image mode" this method has no effect.
   *
   * @param camera The new camera to be used, by default the automatically detected back camera is used.
   * @param cameraSettings The camera options used when accessing the camera, by default HD resolution is used.
   * @returns A promise resolving to the updated [[BarcodePicker]] object when the camera is set
   * (and accessed, if camera access is currently enabled).
   */
  public setActiveCamera(camera?: Camera, cameraSettings?: CameraSettings): Promise<BarcodePicker> {
    if (camera == null || !this.cameraAccess) {
      this.cameraManager.setSelectedCamera(camera);
      this.cameraManager.setSelectedCameraSettings(cameraSettings);

      if (this.cameraAccess) {
        return this.cameraManager.setupCameras().then(() => {
          return this;
        });
      } else {
        return Promise.resolve(this);
      }
    } else {
      return this.cameraManager.initializeCameraWithSettings(camera, cameraSettings).then(() => {
        return this;
      });
    }
  }

  /**
   * Try to apply new settings to the currently used camera for video input,
   * if no settings are passed the default ones are set.
   *
   * If camera access is enabled, the camera is updated and accessed with the new settings.
   *
   * Depending on device features and user permissions for camera access, any of the following errors
   * could be the rejected result of the returned promise:
   * - `PermissionDeniedError`
   * - `NotAllowedError`
   * - `NotFoundError`
   * - `AbortError`
   * - `NotReadableError`
   * - `InternalError`
   * - `NoCameraAvailableError`
   *
   * In "single image mode" this method has no effect.
   *
   * @param cameraSettings The new camera options used when accessing the camera, by default HD resolution is used.
   * @returns A promise resolving to the updated [[BarcodePicker]] object when the camera is updated
   * (and accessed, if camera access is currently enabled).
   */
  public applyCameraSettings(cameraSettings?: CameraSettings): Promise<BarcodePicker> {
    if (!this.cameraAccess) {
      this.cameraManager.setSelectedCameraSettings(cameraSettings);

      return Promise.resolve(this);
    }

    return this.cameraManager.applyCameraSettings(cameraSettings).then(() => {
      return this;
    });
  }

  /**
   * @returns Whether the picker is in a visible state or not.
   */
  public isVisible(): boolean {
    return this.barcodePickerGui.isVisible();
  }

  /**
   * Enable or disable picker visibility.
   *
   * @param visible Whether the picker is in a visible state or not.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setVisible(visible: boolean): BarcodePicker {
    this.barcodePickerGui.setVisible(visible);

    return this;
  }

  /**
   * @returns Whether the camera video is mirrored along the vertical axis.
   */
  public isMirrorImageEnabled(): boolean {
    return this.barcodePickerGui.isMirrorImageEnabled();
  }

  /**
   * Enable or disable camera video mirroring along the vertical axis.
   *
   * In "single image mode" this method has no effect.
   *
   * @param enabled Whether the camera video is mirrored along the vertical axis.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setMirrorImageEnabled(enabled: boolean): BarcodePicker {
    this.barcodePickerGui.setMirrorImageEnabled(enabled);

    return this;
  }

  /**
   * @returns Whether a sound should be played on barcode recognition (iOS requires user input).
   */
  public isPlaySoundOnScanEnabled(): boolean {
    return this.playSoundOnScan;
  }

  /**
   * Enable or disable playing a sound on barcode recognition (iOS requires user input).
   *
   * @param enabled Whether a sound should be played on barcode recognition.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setPlaySoundOnScanEnabled(enabled: boolean): BarcodePicker {
    this.playSoundOnScan = enabled;

    return this;
  }

  /**
   * @returns Whether the device should vibrate on barcode recognition (only Chrome & Firefox, requires user input).
   */
  public isVibrateOnScanEnabled(): boolean {
    return this.vibrateOnScan;
  }

  /**
   * Enable or disable vibrating the device on barcode recognition (only Chrome & Firefox, requires user input).
   *
   * @param enabled Whether the device should vibrate on barcode recognition.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setVibrateOnScanEnabled(enabled: boolean): BarcodePicker {
    this.vibrateOnScan = enabled;

    return this;
  }

  /**
   * @returns Whether a GUI button to switch between different cameras is shown (when available).
   */
  public isCameraSwitcherEnabled(): boolean {
    return this.cameraManager.isCameraSwitcherEnabled();
  }

  /**
   * Show or hide a GUI button to switch between different cameras (when available).
   *
   * In "single image mode" this method has no effect.
   *
   * @param enabled Whether to show a GUI button to switch between different cameras.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setCameraSwitcherEnabled(enabled: boolean): BarcodePicker {
    this.cameraManager.setCameraSwitcherEnabled(enabled);

    return this;
  }

  /**
   * @returns Whether a GUI button to toggle device torch on/off is shown (when available, only Chrome).
   */
  public isTorchToggleEnabled(): boolean {
    return this.cameraManager.isTorchToggleEnabled();
  }

  /**
   * Show or hide a GUI button to toggle device torch on/off (when available, only Chrome).
   *
   * In "single image mode" this method has no effect.
   *
   * @param enabled Whether to show a GUI button to toggle device torch on/off.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setTorchToggleEnabled(enabled: boolean): BarcodePicker {
    this.cameraManager.setTorchToggleEnabled(enabled);

    return this;
  }

  /**
   * @returns Whether manual camera focus when clicking/tapping on the video is enabled (when available, only Chrome).
   */
  public isTapToFocusEnabled(): boolean {
    return this.cameraManager.isTapToFocusEnabled();
  }

  /**
   * Enable or disable manual camera focus when clicking/tapping on the video (when available, only Chrome).
   *
   * In "single image mode" this method has no effect.
   *
   * @param enabled Whether to enable manual camera focus when clicking/tapping on the video.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setTapToFocusEnabled(enabled: boolean): BarcodePicker {
    this.cameraManager.setTapToFocusEnabled(enabled);

    return this;
  }

  /**
   * @returns Whether camera zoom control via pinching gesture on the video is enabled (when available, only Chrome).
   */
  public isPinchToZoomEnabled(): boolean {
    return this.cameraManager.isPinchToZoomEnabled();
  }

  /**
   * Enable or disable camera zoom control via pinching gesture on the video (when available, only Chrome).
   *
   * In "single image mode" this method has no effect.
   *
   * @param enabled Whether to enable camera zoom control via pinching gesture on the video.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setPinchToZoomEnabled(enabled: boolean): BarcodePicker {
    this.cameraManager.setPinchToZoomEnabled(enabled);

    return this;
  }

  /**
   * Enable or disable the torch/flashlight of the device (when available, only Chrome).
   * Changing active camera or camera settings will cause the torch to become disabled.
   *
   * A button on the [[BarcodePicker]] GUI to let the user toggle this functionality can also be set
   * on creation via the *enableTorchToggle* option (enabled by default, when available).
   *
   * In "single image mode" this method has no effect.
   *
   * @param enabled Whether the torch should be enabled or disabled.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setTorchEnabled(enabled: boolean): BarcodePicker {
    this.cameraManager.setTorchEnabled(enabled);

    return this;
  }

  /**
   * Set the zoom level of the device (when available, only Chrome).
   * Changing active camera or camera settings will cause the zoom to be reset.
   *
   * In "single image mode" this method has no effect.
   *
   * @param zoomPercentage The percentage of the max zoom (between 0 and 1).
   * @returns The updated [[BarcodePicker]] object.
   */
  public setZoom(zoomPercentage: number): BarcodePicker {
    this.cameraManager.setZoom(zoomPercentage);

    return this;
  }

  /**
   * @returns Whether the barcode picker has loaded the external Scandit Engine library and is ready to scan.
   */
  public isReady(): boolean {
    return this.isReadyToWork;
  }

  /**
   * Add the listener function to the listeners array for the "ready" event, fired when the external
   * Scandit Engine library has been loaded and the barcode picker can thus start to scan barcodes.
   *
   * No checks are made to see if the listener has already been added.
   * Multiple calls passing the same listener will result in the listener being added, and called, multiple times.
   *
   * @param listener The listener function.
   * @returns The updated [[BarcodePicker]] object.
   */
  public onReady(listener: () => void): BarcodePicker {
    if (this.isReadyToWork) {
      listener();
    } else {
      this.eventEmitter.once("ready", listener, this);
    }

    return this;
  }

  /**
   * Add the listener function to the listeners array for the "scan" event, fired when new barcodes
   * are recognized in the image frame. The returned barcodes are affected
   * by the [[ScanSettings.setCodeDuplicateFilter]] option.
   *
   * No checks are made to see if the listener has already been added.
   * Multiple calls passing the same listener will result in the listener being added, and called, multiple times.
   *
   * @param listener The listener function, which will be invoked with a [[ScanResult]] object.
   * @param once Whether the listener should just be triggered only once and then discarded.
   * @returns The updated [[BarcodePicker]] object.
   */
  public onScan(listener: (scanResult: ScanResult) => void, once: boolean = false): BarcodePicker {
    if (once === true) {
      this.eventEmitter.once("scan", listener, this);
    } else {
      this.eventEmitter.on("scan", listener, this);
    }

    return this;
  }

  /**
   * Removes the specified listener from the "scan" event listener array.
   * This will remove, at most, one instance of a listener from the listener array.
   * If any single listener has been added multiple times then this method must
   * be called multiple times to remove each instance.
   *
   * @param listener The listener function to be removed.
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeScanListener(listener: (scanResult: ScanResult) => void): BarcodePicker {
    this.eventEmitter.removeListener("scan", listener);

    return this;
  }

  /**
   * Removes all listeners from the "scan" event listener array.
   *
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeScanListeners(): BarcodePicker {
    this.eventEmitter.removeAllListeners("scan");

    return this;
  }

  /**
   * Add the listener function to the listeners array for the "scan error" event, fired when an error occurs
   * during scanning initialization and execution. The barcode picker will be automatically paused when this happens.
   *
   * No checks are made to see if the listener has already been added.
   * Multiple calls passing the same listener will result in the listener being added, and called, multiple times.
   *
   * @param listener The listener function, which will be invoked with an `ScanditEngineError` object.
   * @param once Whether the listener should just be triggered only once and then discarded.
   * @returns The updated [[BarcodePicker]] object.
   */
  public onScanError(listener: (error: Error) => void, once: boolean = false): BarcodePicker {
    if (once === true) {
      this.eventEmitter.once("scanError", listener, this);
    } else {
      this.eventEmitter.on("scanError", listener, this);
    }

    return this;
  }

  /**
   * Removes the specified listener from the "scan error" event listener array.
   * This will remove, at most, one instance of a listener from the listener array.
   * If any single listener has been added multiple times then this method must
   * be called multiple times to remove each instance.
   *
   * @param listener The listener function to be removed.
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeScanErrorListener(listener: (error: Error) => void): BarcodePicker {
    this.eventEmitter.removeListener("scanError", listener);

    return this;
  }

  /**
   * Removes all listeners from the "scan error" event listener array.
   *
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeScanErrorListeners(): BarcodePicker {
    this.eventEmitter.removeAllListeners("scanError");

    return this;
  }

  /**
   * Add the listener function to the listeners array for the "submitFrame" event, fired when a new frame is submitted
   * to the engine to be processed. As the frame is not processed yet, the [[ScanResult]]'s *barcodes* property will
   * always be empty (no results yet).
   *
   * No checks are made to see if the listener has already been added.
   * Multiple calls passing the same listener will result in the listener being added, and called, multiple times.
   *
   * @param listener The listener function, which will be invoked with a [[ScanResult]] object.
   * @param once Whether the listener should just be triggered only once and then discarded.
   * @returns The updated [[BarcodePicker]] object.
   */
  public onSubmitFrame(listener: (scanResult: ScanResult) => void, once: boolean = false): BarcodePicker {
    if (once === true) {
      this.eventEmitter.once("submitFrame", listener, this);
    } else {
      this.eventEmitter.on("submitFrame", listener, this);
    }

    return this;
  }

  /**
   * Removes the specified listener from the "submitFrame" event listener array.
   * This will remove, at most, one instance of a listener from the listener array.
   * If any single listener has been added multiple times then this method must
   * be called multiple times to remove each instance.
   *
   * @param listener The listener function to be removed.
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeSubmitFrameListener(listener: (scanResult: ScanResult) => void): BarcodePicker {
    this.eventEmitter.removeListener("submitFrame", listener);

    return this;
  }

  /**
   * Removes all listeners from the "submitFrame" event listener array.
   *
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeSubmitFrameListeners(): BarcodePicker {
    this.eventEmitter.removeAllListeners("submitFrame");

    return this;
  }

  /**
   * Add the listener function to the listeners array for the "processFrame" event, fired when a new frame is processed.
   * This event is fired on every frame, independently from the number of recognized barcodes (can be none).
   * The returned barcodes are affected by the [[ScanSettings.setCodeDuplicateFilter]] option.
   *
   * No checks are made to see if the listener has already been added.
   * Multiple calls passing the same listener will result in the listener being added, and called, multiple times.
   *
   * @param listener The listener function, which will be invoked with a [[ScanResult]] object.
   * @param once Whether the listener should just be triggered only once and then discarded.
   * @returns The updated [[BarcodePicker]] object.
   */
  public onProcessFrame(listener: (scanResult: ScanResult) => void, once: boolean = false): BarcodePicker {
    if (once === true) {
      this.eventEmitter.once("processFrame", listener, this);
    } else {
      this.eventEmitter.on("processFrame", listener, this);
    }

    return this;
  }

  /**
   * Removes the specified listener from the "processFrame" event listener array.
   * This will remove, at most, one instance of a listener from the listener array.
   * If any single listener has been added multiple times then this method must
   * be called multiple times to remove each instance.
   *
   * @param listener The listener function to be removed.
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeProcessFrameListener(listener: (scanResult: ScanResult) => void): BarcodePicker {
    this.eventEmitter.removeListener("processFrame", listener);

    return this;
  }

  /**
   * Removes all listeners from the "processFrame" event listener array.
   *
   * @returns The updated [[BarcodePicker]] object.
   */
  public removeProcessFrameListeners(): BarcodePicker {
    this.eventEmitter.removeAllListeners("processFrame");

    return this;
  }

  /**
   * Set the GUI style for the picker.
   *
   * In "single image mode" this method has no effect.
   *
   * @param guiStyle The new GUI style to be applied.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setGuiStyle(guiStyle: BarcodePicker.GuiStyle): BarcodePicker {
    this.barcodePickerGui.setGuiStyle(guiStyle);

    return this;
  }

  /**
   * Set the fit type for the video element of the picker.
   *
   * If the "cover" type is selected the maximum available search area for barcode detection is (continuously) adjusted
   * automatically according to the visible area of the picker.
   *
   * In "single image mode" this method has no effect.
   *
   * @param objectFit The new fit type to be applied.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setVideoFit(objectFit: BarcodePicker.ObjectFit): BarcodePicker {
    this.barcodePickerGui.setVideoFit(objectFit);

    return this;
  }

  /**
   * Access the currently set or default camera, requesting user permissions if needed.
   * This method is meant to be used after the picker has been initialized with disabled camera access
   * (*accessCamera*=false) or after [[pauseScanning]] has been called with the pause camera stream option.
   * Calling this doesn't do anything if the camera is already being accessed.
   *
   * Depending on device features and user permissions for camera access, any of the following errors
   * could be the rejected result of the returned promise:
   * - `PermissionDeniedError`
   * - `NotAllowedError`
   * - `NotFoundError`
   * - `AbortError`
   * - `NotReadableError`
   * - `InternalError`
   * - `NoCameraAvailableError`
   *
   * In "single image mode" this method has no effect.
   *
   * @returns A promise resolving to the updated [[BarcodePicker]] object when the camera is accessed.
   */
  public accessCamera(): Promise<BarcodePicker> {
    if (!this.cameraAccess || this.cameraManager.activeCamera == null) {
      return new Promise((resolve, reject) => {
        this.cameraManager
          .setupCameras()
          .then(() => {
            this.cameraAccess = true;

            return resolve(this);
          })
          .catch(reject);
      });
    }

    return Promise.resolve(this);
  }

  /**
   * Create a new parser object.
   *
   * @param dataFormat The format of the input data for the parser.
   * @returns The newly created parser.
   */
  public createParserForFormat(dataFormat: Parser.DataFormat): Parser {
    return this.scanner.createParserForFormat(dataFormat);
  }

  /**
   * Reassign the barcode picker to a different HTML element.
   *
   * All the barcode picker elements inside the current origin element will be moved to the new given one.
   *
   * @param originElement The HTMLElement into which all the necessary elements for the picker will be moved.
   * @returns The updated [[BarcodePicker]] object.
   */
  public reassignOriginElement(originElement: HTMLElement): BarcodePicker {
    this.barcodePickerGui.reassignOriginElement(originElement);

    return this;
  }

  /**
   * Set the target frames per second to be processed by the scanning engine.
   *
   * The final speed is limited by the camera framerate (usually 30 FPS) and the frame processing time of the device.
   * By setting this to lower numbers devices can save power by performing less work during scanning operations,
   * depending on device speed (faster devices can "sleep" for longer periods).
   *
   * In "single image mode" this method has no effect.
   *
   * @param targetScanningFPS The target frames per second to be processed.
   * Must be a number bigger than 0, by default set to 30.
   * @returns The updated [[BarcodePicker]] object.
   */
  public setTargetScanningFPS(targetScanningFPS: number): BarcodePicker {
    if (targetScanningFPS > 0) {
      this.targetScanningFPS = targetScanningFPS;
    }

    return this;
  }

  /**
   * @returns The internally used initialized (and possibly configured) [[Scanner]] object instance.
   */
  public getScanner(): Scanner {
    return this.scanner;
  }

  private triggerFatalError(error: Error): void {
    this.fatalError = error;
    console.error(error);
  }

  private handleScanResult(scanResult: ScanResult): void {
    this.eventEmitter.emit("processFrame", scanResult);

    if (scanResult.barcodes.length !== 0) {
      this.barcodePickerGui.flashGUI();
      if (this.playSoundOnScan) {
        this.beepSound.play();
      }
      if (this.vibrateOnScan && this.vibrateFunction != null) {
        this.vibrateFunction.call(navigator, 300);
      }

      this.eventEmitter.emit("scan", scanResult);
    }
  }

  private scheduleVideoProcessing(timeout: number = 0): void {
    window.setTimeout(() => {
      this.videoProcessing();
    }, timeout); // Leave some breathing room for other operations
  }

  private scheduleNextVideoProcessing(processingStartTime: number): void {
    if (this.targetScanningFPS < 30) {
      if (this.averageProcessingTime == null) {
        this.averageProcessingTime = performance.now() - processingStartTime;
      } else {
        this.averageProcessingTime = this.averageProcessingTime * 0.9 + (performance.now() - processingStartTime) * 0.1;
      }
      const nextProcessingCallDelay: number = 1000 / this.targetScanningFPS - this.averageProcessingTime;
      if (nextProcessingCallDelay > 16) {
        // More than 60 FPS, we have time to sleep
        this.scheduleVideoProcessing(nextProcessingCallDelay);
      } else {
        this.scheduleVideoProcessing();
      }
    } else {
      this.scheduleVideoProcessing();
    }
  }

  private processVideoFrame(highQualitySingleFrameMode: boolean): Promise<void> {
    const imageData: Uint8ClampedArray | undefined = this.barcodePickerGui.getVideoImageData();

    // This could happen in very weird situations and should be temporary
    if (imageData == null) {
      return Promise.resolve();
    }

    if (this.eventEmitter.listenerCount("submitFrame") > 0) {
      this.eventEmitter.emit("submitFrame", {
        barcodes: [],
        imageData: imageData.slice(),
        imageSettings: this.scanner.getImageSettings()
      });
    }

    return new Promise(resolve => {
      this.scanner
        .processImage(imageData, highQualitySingleFrameMode)
        .then(scanResult => {
          if (!this.scanningPaused) {
            this.handleScanResult(scanResult);
          }
          resolve();
        })
        .catch(scanError => {
          if (!this.scanningPaused) {
            this.pauseScanning();
            this.eventEmitter.emit("scanError", scanError);
          }
          resolve();
        });
    });
  }

  private videoProcessing(): void {
    if (this.destroyed) {
      return;
    }

    if (
      this.cameraManager.activeCamera == null ||
      this.cameraManager.activeCamera.currentResolution == null ||
      this.fatalError != null ||
      this.scanningPaused ||
      !this.scanner.isReady() ||
      this.scanner.isBusyProcessing() ||
      this.latestVideoTimeProcessed === this.barcodePickerGui.getVideoCurrentTime()
    ) {
      this.scheduleVideoProcessing();

      return;
    }

    if (this.latestVideoTimeProcessed == null) {
      // Show active GUI if needed, as now it's the moment the scanner is ready and used for the first time
      this.resumeScanning();
    }

    const processingStartTime: number = performance.now();
    this.latestVideoTimeProcessed = this.barcodePickerGui.getVideoCurrentTime();

    try {
      this.processVideoFrame(false).then(() => {
        this.scheduleNextVideoProcessing(processingStartTime);
      });
    } catch (error) {
      this.triggerFatalError(error);
    }
  }
}

// istanbul ignore next
export namespace BarcodePicker {
  /**
   * GUI style to be used by a barcode picker, used to hint barcode placement in the frame.
   */
  export enum GuiStyle {
    /**
     * No GUI is shown to indicate where the barcode should be placed.
     * Be aware that the Scandit logo continues to be displayed as showing it is part of the license agreement.
     */
    NONE = "none",
    /**
     * A laser line is shown.
     */
    LASER = "laser",
    /**
     * A rectangular viewfinder with rounded corners is shown.
     */
    VIEWFINDER = "viewfinder"
  }

  /**
   * Fit type used to control the resizing (scale) of the barcode picker to fit in its container *originElement*.
   */
  export enum ObjectFit {
    /**
     * Scale to maintain aspect ratio while fitting within the *originElement*'s content box.
     * Aspect ratio is preserved, so the barcode picker will be "letterboxed" if its aspect ratio
     * does not match the aspect ratio of the box.
     */
    CONTAIN = "contain",
    /**
     * Scale to maintain aspect ratio while filling the *originElement*'s entire content box.
     * Aspect ratio is preserved, so the barcode picker will be clipped to fit if its aspect ratio
     * does not match the aspect ratio of the box.
     */
    COVER = "cover"
  }
}
